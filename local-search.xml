<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>docker命令大全</title>
    <link href="/2021/10/05/docker%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <url>/2021/10/05/docker%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker命令大全"><a href="#Docker命令大全" class="headerlink" title="Docker命令大全"></a>Docker命令大全</h1><h3 id="1-容器生命周期管理"><a href="#1-容器生命周期管理" class="headerlink" title="1.容器生命周期管理"></a>1.容器生命周期管理</h3><h5 id="run-创建一个新的容器并运行一个命令"><a href="#run-创建一个新的容器并运行一个命令" class="headerlink" title="run 创建一个新的容器并运行一个命令"></a>run 创建一个新的容器并运行一个命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs shell">语法<br>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]<br>OPTIONS说明：<br>-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；<br>-d: 后台运行容器，并返回容器ID；<br>-i: 以交互模式运行容器，通常与 -t 同时使用；<br>-p: 端口映射，格式为：主机(宿主)端口:容器端口 <br>-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；<br>--name=&quot;nginx-lb&quot;: 为容器指定一个名称；<br>--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；<br>--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；<br>-h &quot;mars&quot;: 指定容器的hostname；<br>-e username=&quot;ritchie&quot;: 设置环境变量；<br>--env-file=[]: 从指定文件读入环境变量；<br>--cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot;: 绑定容器到指定CPU运行；<br>-m :设置容器使用内存最大值；<br>--net=&quot;bridge&quot;: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；<br>--link=[]: 添加链接到另一个容器；<br>--expose=[]: 开放一个端口或一组端口<br>实例<br><br>使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。<br><br>docker run --name mynginx -d nginx:latest<br><br>使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。<br><br>docker run -P -d nginx:latest<br><br>使用镜像 nginx:latest，以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录 /data 映射到容器的 /data。<br><br>docker run -p 80:80 -v /data:/data -d nginx:latest<br><br>绑定容器的 8080 端口，并将其映射到本地主机 127.0.0.1 的 80 端口上。<br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> docker run -p 127.0.0.1:80:8080/tcp ubuntu bash</span><br><br>使用镜像nginx:latest以交互模式启动一个容器,在容器内执行/bin/bash命令。<br><br>runoob@runoob:~$ docker run -it nginx:latest /bin/bash<br>root@b8573233d675:/# <br></code></pre></td></tr></table></figure><h4 id="start-stop-restart"><a href="#start-stop-restart" class="headerlink" title="start/stop/restart"></a>start/stop/restart</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker start :启动一个或多少已经被停止的容器<br>docker stop :停止一个运行中的容器<br>docker restart :重启容器<br>语法<br>docker start [OPTIONS] CONTAINER [CONTAINER...]<br>docker stop [OPTIONS] CONTAINER [CONTAINER...]<br>docker restart [OPTIONS] CONTAINER [CONTAINER...]<br>实例<br>启动已被停止的容器myrunoob<br>docker start myrunoob<br>停止运行中的容器myrunoob<br>docker stop myrunoob<br>重启容器myrunoob<br>docker restart myrunoob<br></code></pre></td></tr></table></figure><h4 id="kill-杀掉一个运行中的容器"><a href="#kill-杀掉一个运行中的容器" class="headerlink" title="kill 杀掉一个运行中的容器"></a>kill 杀掉一个运行中的容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">语法<br>docker kill [OPTIONS] CONTAINER [CONTAINER...]<br>OPTIONS说明：<br>-s :向容器发送一个信号<br>实例<br>杀掉运行中的容器mynginx<br>runoob@runoob:~$ docker kill -s KILL mynginx<br>mynginx<br></code></pre></td></tr></table></figure><h4 id="删除一个或多个容器"><a href="#删除一个或多个容器" class="headerlink" title="删除一个或多个容器"></a>删除一个或多个容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">语法<br>docker rm [OPTIONS] CONTAINER [CONTAINER...]<br>OPTIONS说明：<br>-f :通过SIGKILL信号强制删除一个运行中的容器<br>-l :移除容器间的网络连接，而非容器本身<br>-v :-v 删除与容器关联的卷<br>实例<br>强制删除容器db01、db02<br>docker rm -f db01 db02<br>移除容器nginx01对容器db01的连接，连接名db<br>docker rm -l db <br>删除容器nginx01,并删除容器挂载的数据卷<br>docker rm -v nginx01<br></code></pre></td></tr></table></figure><h4 id="create-创建一个新的容器但不启动它"><a href="#create-创建一个新的容器但不启动它" class="headerlink" title="create 创建一个新的容器但不启动它"></a>create 创建一个新的容器但不启动它</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">语法<br>docker create [OPTIONS] IMAGE [COMMAND] [ARG...]<br>语法同 docker run<br>实例<br>使用docker镜像nginx:latest创建一个容器,并将容器命名为myrunoob<br>runoob@runoob:~$ docker create  --name myrunoob  nginx:latest      <br>09b93464c2f75b7b69f83d56a9cfc23ceb50a48a9db7652ee4c27e3e2cb1961f<br></code></pre></td></tr></table></figure><h4 id="exec-在运行的容器中执行命令"><a href="#exec-在运行的容器中执行命令" class="headerlink" title="exec 在运行的容器中执行命令"></a>exec 在运行的容器中执行命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">语法<br>docker exec [OPTIONS] CONTAINER COMMAND [ARG...]<br>OPTIONS说明：<br>-d :分离模式: 在后台运行<br>-i :即使没有附加也保持STDIN 打开<br>-t :分配一个伪终端<br>实例<br>在容器mynginx中以交互模式执行容器内/root/runoob.sh脚本<br><br>runoob@runoob:~$ docker exec -it mynginx /bin/sh /root/runoob.sh<br>http://www.runoob.com/<br>在容器mynginx中开启一个交互模式的终端<br>runoob@runoob:~$ docker exec -i -t  mynginx /bin/bash<br>root@b1a0703e41e7:/#<br></code></pre></td></tr></table></figure><h3 id="2-容器操作"><a href="#2-容器操作" class="headerlink" title="2.容器操作"></a>2.容器操作</h3><h4 id="ps-列出容器"><a href="#ps-列出容器" class="headerlink" title="ps 列出容器"></a>ps 列出容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs shell">语法<br>docker ps [OPTIONS]<br>OPTIONS说明：<br>-a :显示所有的容器，包括未运行的。<br>-f :根据条件过滤显示的内容。<br><br>--format :指定返回值的模板文件。<br>-l :显示最近创建的容器。<br>-n :列出最近创建的n个容器。<br>--no-trunc :不截断输出。<br>-q :静默模式，只显示容器编号。<br>-s :显示总的文件大小。<br>实例<br>列出所有在运行的容器信息。<br>runoob@runoob:~$ docker ps<br>CONTAINER ID   IMAGE          COMMAND                ...  PORTS                    NAMES<br>09b93464c2f7   nginx:latest   &quot;nginx -g &#x27;daemon off&quot; ...  80/tcp, 443/tcp          myrunoob<br>96f7f14e99ab   mysql:5.6      &quot;docker-entrypoint.sh&quot; ...  0.0.0.0:3306-&gt;3306/tcp   mymysql<br>列出最近创建的5个容器信息。<br>runoob@runoob:~$ docker ps -n 5<br>CONTAINER ID        IMAGE               COMMAND                   CREATED           <br>09b93464c2f7        nginx:latest        &quot;nginx -g &#x27;daemon off&quot;    2 days ago   ...     <br>b8573233d675        nginx:latest        &quot;/bin/bash&quot;               2 days ago   ...     <br>b1a0703e41e7        nginx:latest        &quot;nginx -g &#x27;daemon off&quot;    2 days ago   ...    <br>f46fb1dec520        5c6e1090e771        &quot;/bin/sh -c &#x27;set -x \t&quot;   2 days ago   ...   <br>a63b4a5597de        860c279d2fec        &quot;bash&quot;                    2 days ago   ...<br>列出所有创建的容器ID。<br>runoob@runoob:~$ docker ps -a -q<br>09b93464c2f7<br>b8573233d675<br>b1a0703e41e7<br>f46fb1dec520<br>a63b4a5597de<br>6a4aa42e947b<br>de7bb36e7968<br>43a432b73776<br>664a8ab1a585<br>ba52eb632bbd<br></code></pre></td></tr></table></figure><h4 id="inspect-获取容器-镜像的元数据"><a href="#inspect-获取容器-镜像的元数据" class="headerlink" title="inspect 获取容器/镜像的元数据"></a>inspect 获取容器/镜像的元数据</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs shell">语法<br>docker inspect [OPTIONS] NAME|ID [NAME|ID...]<br>OPTIONS说明：<br>-f :指定返回值的模板文件。<br>-s :显示总的文件大小。<br>--type :为指定类型返回JSON。<br>实例<br>获取镜像mysql:5.6的元信息。<br>runoob@runoob:~$ docker inspect mysql:5.6<br>[<br>    &#123;<br>        &quot;Id&quot;: &quot;sha256:2c0964ec182ae9a045f866bbc2553087f6e42bfc16074a74fb820af235f070ec&quot;,<br>        &quot;RepoTags&quot;: [<br>            &quot;mysql:5.6&quot;<br>        ],<br>        &quot;RepoDigests&quot;: [],<br>        &quot;Parent&quot;: &quot;&quot;,<br>        &quot;Comment&quot;: &quot;&quot;,<br>        &quot;Created&quot;: &quot;2016-05-24T04:01:41.168371815Z&quot;,<br>        &quot;Container&quot;: &quot;e0924bc460ff97787f34610115e9363e6363b30b8efa406e28eb495ab199ca54&quot;,<br>        &quot;ContainerConfig&quot;: &#123;<br>            &quot;Hostname&quot;: &quot;b0cf605c7757&quot;,<br>            &quot;Domainname&quot;: &quot;&quot;,<br>            &quot;User&quot;: &quot;&quot;,<br>            &quot;AttachStdin&quot;: false,<br>            &quot;AttachStdout&quot;: false,<br>            &quot;AttachStderr&quot;: false,<br>            &quot;ExposedPorts&quot;: &#123;<br>                &quot;3306/tcp&quot;: &#123;&#125;<br>            &#125;,<br>...<br>获取正在运行的容器mymysql的 IP。 <br>runoob@runoob:~$ docker inspect --format=&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27; mymysql<br>172.17.0.3<br></code></pre></td></tr></table></figure><h4 id="top-查看容器中运行的进程信息，支持ps命令参数"><a href="#top-查看容器中运行的进程信息，支持ps命令参数" class="headerlink" title="top 查看容器中运行的进程信息，支持ps命令参数"></a>top 查看容器中运行的进程信息，支持ps命令参数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">语法<br>docker top [OPTIONS] CONTAINER [ps OPTIONS]<br>容器运行时不一定有/bin/bash终端来交互执行top命令，而且容器还不一定有top命令，可以使用docker top来实现查看container中正在运行的进程。<br>实例<br>查看容器mymysql的进程信息。<br>runoob@runoob:~/mysql$ docker top mymysql<br>UID    PID    PPID    C      STIME   TTY  TIME       CMD<br>999    40347  40331   18     00:58   ?    00:00:02   mysqld<br>查看所有运行容器的进程信息。<br>for i in  `docker ps |grep Up|awk &#x27;&#123;print $1&#125;&#x27;`;do echo \ &amp;&amp;docker top $i; done<br></code></pre></td></tr></table></figure><h4 id="attach-连接到正在运行中的容器"><a href="#attach-连接到正在运行中的容器" class="headerlink" title="attach 连接到正在运行中的容器"></a>attach 连接到正在运行中的容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">语法<br>docker attach [OPTIONS] CONTAINER<br>要attach上去的容器必须正在运行，可以同时连接上同一个container来共享屏幕（与screen命令的attach类似）。<br>官方文档中说attach后可以通过CTRL-C来detach，但实际上经过我的测试，如果container当前在运行bash，CTRL-C自然是当前行的输入，没有退出；<br>如果container当前正在前台运行进程，如输出nginx的access.log日志，CTRL-C不仅会导致退出容器，而且还stop了。这不是我们想要的，detach的意思按理应该是脱离容器终端，但容器依然运行。好在attach是可以带上--sig-proxy=false来确保CTRL-D或CTRL-C不会关闭容器。<br>实例<br>容器mynginx将访问日志指到标准输出，连接到容器查看访问信息。<br>runoob@runoob:~$ docker attach --sig-proxy=false mynginx<br>192.168.239.1 - - [10/Jul/2016:16:54:26 +0000] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36&quot; &quot;-&quot;<br></code></pre></td></tr></table></figure><h4 id="events-从服务器获取实时事件"><a href="#events-从服务器获取实时事件" class="headerlink" title="events 从服务器获取实时事件"></a>events 从服务器获取实时事件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">语法<br>docker events [OPTIONS]<br>OPTIONS说明：<br>-f ：根据条件过滤事件；<br>--since ：从指定的时间戳后显示所有事件;<br>--until ：流水时间显示到指定的时间为止；<br>实例<br>显示docker 2016年7月1日后的所有事件。<br>runoob@runoob:~/mysql$ docker events  --since=&quot;1467302400&quot;<br>2016-07-08T19:44:54.501277677+08:00 network connect 66f958fd13dc4314ad20034e576d5c5eba72e0849dcc38ad9e8436314a4149d4 (container=b8573233d675705df8c89796a2c2687cd8e36e03646457a15fb51022db440e64, name=bridge, type=bridge)<br>2016-07-08T19:44:54.723876221+08:00 container start b8573233d675705df8c89796a2c2687cd8e36e03646457a15fb51022db440e64 (image=nginx:latest, name=elegant_albattani)<br>2016-07-08T19:44:54.726110498+08:00 container resize b8573233d675705df8c89796a2c2687cd8e36e03646457a15fb51022db440e64 (height=39, image=nginx:latest, name=elegant_albattani, width=167)<br>2016-07-08T19:46:22.137250899+08:00 container die b8573233d675705df8c89796a2c2687cd8e36e03646457a15fb51022db440e64 (exitCode=0, image=nginx:latest, name=elegant_albattani)<br></code></pre></td></tr></table></figure><h4 id="logs-获取容器的日志"><a href="#logs-获取容器的日志" class="headerlink" title="logs 获取容器的日志"></a>logs 获取容器的日志</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">语法<br>docker logs [OPTIONS] CONTAINER<br>OPTIONS说明：<br>-f : 跟踪日志输出<br>--since :显示某个开始时间的所有日志<br>-t : 显示时间戳<br>--tail :仅列出最新N条容器日志<br>实例<br>跟踪查看容器mynginx的日志输出。<br>runoob@runoob:~$ docker logs -f mynginx<br>192.168.239.1 - - [10/Jul/2016:16:53:33 +0000] &quot;GET / HTTP/1.1&quot; 200 612 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36&quot; &quot;-&quot;<br>2016/07/10 16:53:33 [error] 5#5: *1 open() &quot;/usr/share/nginx/html/favicon.ico&quot; failed (2: No such file or directory), client: 192.168.239.1, server: localhost, request: &quot;GET /favicon.ico HTTP/1.1&quot;, host: &quot;192.168.239.130&quot;, referrer: &quot;http://192.168.239.130/&quot;<br>192.168.239.1 - - [10/Jul/2016:16:53:33 +0000] &quot;GET /favicon.ico HTTP/1.1&quot; 404 571 &quot;http://192.168.239.130/&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36&quot; &quot;-&quot;<br>192.168.239.1 - - [10/Jul/2016:16:53:59 +0000] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36&quot; &quot;-&quot;<br>...<br><br>查看容器mynginx从2016年7月1日后的最新10条日志。<br>docker logs --since=&quot;2016-07-01&quot; --tail=10 mynginx<br></code></pre></td></tr></table></figure><h4 id="wait-阻塞运行直到容器停止，然后打印出它的推出代码"><a href="#wait-阻塞运行直到容器停止，然后打印出它的推出代码" class="headerlink" title="wait 阻塞运行直到容器停止，然后打印出它的推出代码"></a>wait 阻塞运行直到容器停止，然后打印出它的推出代码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">语法<br>docker wait [OPTIONS] CONTAINER [CONTAINER...]<br>实例<br>docker wait CONTAINER<br></code></pre></td></tr></table></figure><h4 id="export-将文件系统作为一个tar归档文件导出到STDOUT"><a href="#export-将文件系统作为一个tar归档文件导出到STDOUT" class="headerlink" title="export 将文件系统作为一个tar归档文件导出到STDOUT"></a>export 将文件系统作为一个tar归档文件导出到STDOUT</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">语法<br>docker export [OPTIONS] CONTAINER<br>OPTIONS说明：<br>-o :将输入内容写到文件。<br>实例<br>将id为a404c6c174a2的容器按日期保存为tar文件。<br>runoob@runoob:~$ docker export -o mysql-`date +%Y%m%d`.tar a404c6c174a2<br>runoob@runoob:~$ ls mysql-`date +%Y%m%d`.tar<br>mysql-20160711.tar<br></code></pre></td></tr></table></figure><h4 id="port-列出指定的容器的端口映射，或者查找将PRIVATE-PORTNAT到面向公众的端口"><a href="#port-列出指定的容器的端口映射，或者查找将PRIVATE-PORTNAT到面向公众的端口" class="headerlink" title="port 列出指定的容器的端口映射，或者查找将PRIVATE_PORTNAT到面向公众的端口"></a>port 列出指定的容器的端口映射，或者查找将PRIVATE_PORTNAT到面向公众的端口</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">语法<br>docker port [OPTIONS] CONTAINER [PRIVATE_PORT[/PROTO]]<br>实例<br>查看容器mynginx的端口映射情况。<br>runoob@runoob:~$ docker port mymysql<br>3306/tcp -&gt; 0.0.0.0:3306<br></code></pre></td></tr></table></figure><h3 id="3-容器rootfs命令"><a href="#3-容器rootfs命令" class="headerlink" title="3. 容器rootfs命令"></a>3. 容器rootfs命令</h3><h4 id="commit-从容器创建一个新的镜像"><a href="#commit-从容器创建一个新的镜像" class="headerlink" title="commit 从容器创建一个新的镜像"></a>commit 从容器创建一个新的镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">语法<br>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]<br>OPTIONS说明：<br>-a :提交的镜像作者；<br><br>-c :使用Dockerfile指令来创建镜像；<br><br>-m :提交时的说明文字；<br><br>-p :在commit时，将容器暂停。<br><br>实例<br>将容器a404c6c174a2 保存为新的镜像,并添加提交人信息和说明信息。<br>runoob@runoob:~$ docker commit -a &quot;runoob.com&quot; -m &quot;my apache&quot; a404c6c174a2  mymysql:v1 <br>sha256:37af1236adef1544e8886be23010b66577647a40bc02c0885a6600b33ee28057<br>runoob@runoob:~$ docker images mymysql:v1<br>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<br>mymysql             v1                  37af1236adef        15 seconds ago      329 MB<br></code></pre></td></tr></table></figure><h4 id="cp-用于容器与主机之间的数据拷贝"><a href="#cp-用于容器与主机之间的数据拷贝" class="headerlink" title="cp 用于容器与主机之间的数据拷贝"></a>cp 用于容器与主机之间的数据拷贝</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">语法<br>docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-<br>docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH<br>OPTIONS说明：<br>-L :保持源目标中的链接<br>实例<br>将主机/www/runoob目录拷贝到容器96f7f14e99ab的/www目录下。<br>docker cp /www/runoob 96f7f14e99ab:/www/<br>将主机/www/runoob目录拷贝到容器96f7f14e99ab中，目录重命名为www。<br>docker cp /www/runoob 96f7f14e99ab:/www<br>将容器96f7f14e99ab的/www目录拷贝到主机的/tmp目录中。<br>docker cp  96f7f14e99ab:/www /tmp/<br></code></pre></td></tr></table></figure><h4 id="diff-检查容器里文件结构的更改"><a href="#diff-检查容器里文件结构的更改" class="headerlink" title="diff 检查容器里文件结构的更改"></a>diff 检查容器里文件结构的更改</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">语法<br>docker diff [OPTIONS] CONTAINER<br>实例<br>查看容器mymysql的文件结构更改。<br>runoob@runoob:~$ docker diff mymysql<br>A /logs<br>A /mysql_data<br>C /run<br>C /run/mysqld<br>A /run/mysqld/mysqld.pid<br>A /run/mysqld/mysqld.sock<br>C /tmp<br></code></pre></td></tr></table></figure><h3 id="4-镜像仓库"><a href="#4-镜像仓库" class="headerlink" title="4. 镜像仓库"></a>4. 镜像仓库</h3><h4 id="login-登录到一个Docker镜像仓库"><a href="#login-登录到一个Docker镜像仓库" class="headerlink" title="login 登录到一个Docker镜像仓库"></a>login 登录到一个Docker镜像仓库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker login : 登陆到一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub<br>docker logout : 登出一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub<br>语法<br>docker login [OPTIONS] [SERVER]<br>docker logout [OPTIONS] [SERVER]<br>OPTIONS说明：<br>-u :登陆的用户名<br>-p :登陆的密码<br>实例<br>登陆到Docker Hub<br>docker login -u 用户名 -p 密码<br>登出Docker Hub<br>docker logout<br></code></pre></td></tr></table></figure><h4 id="pull-从镜像仓库中拉取或者更新指定镜像"><a href="#pull-从镜像仓库中拉取或者更新指定镜像" class="headerlink" title="pull 从镜像仓库中拉取或者更新指定镜像"></a>pull 从镜像仓库中拉取或者更新指定镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">语法<br>docker pull [OPTIONS] NAME[:TAG|@DIGEST]<br>OPTIONS说明：<br>-a :拉取所有 tagged 镜像<br><br>--disable-content-trust :忽略镜像的校验,默认开启<br><br>实例<br>从Docker Hub下载java最新版镜像。<br>docker pull java<br>从Docker Hub下载REPOSITORY为java的所有镜像。<br>docker pull -a java<br></code></pre></td></tr></table></figure><h4 id="push-将本地的镜像上传到镜像仓库，要先登录到镜像仓库"><a href="#push-将本地的镜像上传到镜像仓库，要先登录到镜像仓库" class="headerlink" title="push 将本地的镜像上传到镜像仓库，要先登录到镜像仓库"></a>push 将本地的镜像上传到镜像仓库，要先登录到镜像仓库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">语法<br>docker push [OPTIONS] NAME[:TAG]<br>OPTIONS说明：<br>--disable-content-trust :忽略镜像的校验,默认开启<br>实例<br>上传本地镜像myapache:v1到镜像仓库中。<br>docker push myapache:v1<br></code></pre></td></tr></table></figure><h4 id="search-从Docker-Hub查找镜像"><a href="#search-从Docker-Hub查找镜像" class="headerlink" title="search 从Docker Hub查找镜像"></a>search 从Docker Hub查找镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">语法<br>docker search [OPTIONS] TERM<br>OPTIONS说明：<br>--automated :只列出 automated build类型的镜像；<br>--no-trunc :显示完整的镜像描述；<br>-s :列出收藏数不小于指定值的镜像。<br>实例<br>从Docker Hub查找所有镜像名包含java，并且收藏数大于10的镜像<br>runoob@runoob:~$ docker search -s 10 java<br>NAME                  DESCRIPTION                           STARS   OFFICIAL   AUTOMATED<br>java                  Java is a concurrent, class-based...   1037    [OK]       <br>anapsix/alpine-java   Oracle Java 8 (and 7) with GLIBC ...   115                [OK]<br>develar/java                                                 46                 [OK]<br>isuper/java-oracle    This repository contains all java...   38                 [OK]<br>lwieske/java-8        Oracle Java 8 Container - Full + ...   27                 [OK]<br>nimmis/java-centos    This is docker images of CentOS 7...   13                 [OK]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SnowFlake算法</title>
    <link href="/2021/10/04/SnowFlake%E7%AE%97%E6%B3%95/"/>
    <url>/2021/10/04/SnowFlake%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>​        SnowFlake 算法，是 Twitter 开源的分布式 id 生成算法。其核心思想就是：使用一个 64 bit 的 long 型的数字作为全局唯一 id。在分布式系统中的应用十分广泛，且ID 引入了时间戳，基本上保持自增的，后面的代码中有详细的注解。</p><p>​        这 64 个 bit 中，其中 1 个 bit 是不用的，然后用其中的 41 bit 作为毫秒数，用 10 bit 作为工作机器 id，12 bit 作为序列号。</p><p>​        给大家举个例子吧，比如下面那个 64 bit 的 long 型数字：</p><ul><li><p>第一个部分，是 1 个 bit：0，这个是无意义的。</p></li><li><p>第二个部分是 41 个 bit：表示的是时间戳。</p></li><li><p>第三个部分是 5 个 bit：表示的是机房 id，10001。</p></li><li><p>第四个部分是 5 个 bit：表示的是机器 id，1 1001。</p></li><li><p>第五个部分是 12 个 bit：表示的序号，就是某个机房某台机器上这一毫秒内同时生成的 id 的序号，0000 00000000。</p><img src="/2021/10/04/SnowFlake%E7%AE%97%E6%B3%95/1.png" class=""></li></ul><h4 id="SnowFlake算法的实现代码如下："><a href="#SnowFlake算法的实现代码如下：" class="headerlink" title="SnowFlake算法的实现代码如下："></a>SnowFlake算法的实现代码如下：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs java"> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IdWorker</span> </span>&#123;<br> <br><span class="hljs-comment">//因为二进制里第一个 bit 为如果是 1，那么都是负数，但是我们生成的 id 都是正数，所以第一个 bit 统一都是 0。</span><br> <br><span class="hljs-comment">//机器ID  2进制5位  32位减掉1位 31个</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> workerId;<br><span class="hljs-comment">//机房ID 2进制5位  32位减掉1位 31个</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> datacenterId;<br><span class="hljs-comment">//代表一毫秒内生成的多个id的最新序号  12位 4096 -1 = 4095 个</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> sequence;<br><span class="hljs-comment">//设置一个时间初始值    2^41 - 1   差不多可以用69年</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> twepoch = <span class="hljs-number">1585644268888L</span>;<br><span class="hljs-comment">//5位的机器id</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> workerIdBits = <span class="hljs-number">5L</span>;<br><span class="hljs-comment">//5位的机房id</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> datacenterIdBits = <span class="hljs-number">5L</span>;<br><span class="hljs-comment">//每毫秒内产生的id数 2 的 12次方</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> sequenceBits = <span class="hljs-number">12L</span>;<br><span class="hljs-comment">// 这个是二进制运算，就是5 bit最多只能有31个数字，也就是说机器id最多只能是32以内</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> maxWorkerId = -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; workerIdBits);<br><span class="hljs-comment">// 这个是一个意思，就是5 bit最多只能有31个数字，机房id最多只能是32以内</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> maxDatacenterId = -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; datacenterIdBits);<br> <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> workerIdShift = sequenceBits;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> datacenterIdShift = sequenceBits + workerIdBits;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> sequenceMask = -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; sequenceBits);<br><span class="hljs-comment">//记录产生时间毫秒数，判断是否是同1毫秒</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> lastTimestamp = -<span class="hljs-number">1L</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getWorkerId</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> workerId;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getDatacenterId</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> datacenterId;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getTimestamp</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> System.currentTimeMillis();<br>&#125;<br> <br> <br> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">IdWorker</span><span class="hljs-params">(<span class="hljs-keyword">long</span> workerId, <span class="hljs-keyword">long</span> datacenterId, <span class="hljs-keyword">long</span> sequence)</span> </span>&#123;<br> <br><span class="hljs-comment">// 检查机房id和机器id是否超过31 不能小于0</span><br><span class="hljs-keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<br>String.format(<span class="hljs-string">&quot;worker Id can&#x27;t be greater than %d or less than 0&quot;</span>,maxWorkerId));<br>&#125;<br> <br><span class="hljs-keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="hljs-number">0</span>) &#123;<br> <br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<br>String.format(<span class="hljs-string">&quot;datacenter Id can&#x27;t be greater than %d or less than 0&quot;</span>,maxDatacenterId));<br>&#125;<br><span class="hljs-keyword">this</span>.workerId = workerId;<br><span class="hljs-keyword">this</span>.datacenterId = datacenterId;<br><span class="hljs-keyword">this</span>.sequence = sequence;<br>&#125;<br> <br><span class="hljs-comment">// 这个是核心方法，通过调用nextId()方法，让当前这台机器上的snowflake算法程序生成一个全局唯一的id</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">long</span> <span class="hljs-title">nextId</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 这儿就是获取当前时间戳，单位是毫秒</span><br><span class="hljs-keyword">long</span> timestamp = timeGen();<br><span class="hljs-keyword">if</span> (timestamp &lt; lastTimestamp) &#123;<br> <br>System.err.printf(<br><span class="hljs-string">&quot;clock is moving backwards. Rejecting requests until %d.&quot;</span>, lastTimestamp);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<br>String.format(<span class="hljs-string">&quot;Clock moved backwards. Refusing to generate id for %d milliseconds&quot;</span>,<br>lastTimestamp - timestamp));<br>&#125;<br> <br><span class="hljs-comment">// 下面是说假设在同一个毫秒内，又发送了一个请求生成一个id</span><br><span class="hljs-comment">// 这个时候就得把seqence序号给递增1，最多就是4096</span><br><span class="hljs-keyword">if</span> (lastTimestamp == timestamp) &#123;<br> <br><span class="hljs-comment">// 这个意思是说一个毫秒内最多只能有4096个数字，无论你传递多少进来，</span><br><span class="hljs-comment">//这个位运算保证始终就是在4096这个范围内，避免你自己传递个sequence超过了4096这个范围</span><br>sequence = (sequence + <span class="hljs-number">1</span>) &amp; sequenceMask;<br><span class="hljs-comment">//当某一毫秒的时间，产生的id数 超过4095，系统会进入等待，直到下一毫秒，系统继续产生ID</span><br><span class="hljs-keyword">if</span> (sequence == <span class="hljs-number">0</span>) &#123;<br>timestamp = tilNextMillis(lastTimestamp);<br>&#125;<br> <br>&#125; <span class="hljs-keyword">else</span> &#123;<br>sequence = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 这儿记录一下最近一次生成id的时间戳，单位是毫秒</span><br>lastTimestamp = timestamp;<br><span class="hljs-comment">// 这儿就是最核心的二进制位运算操作，生成一个64bit的id</span><br><span class="hljs-comment">// 先将当前时间戳左移，放到41 bit那儿；将机房id左移放到5 bit那儿；将机器id左移放到5 bit那儿；将序号放最后12 bit</span><br><span class="hljs-comment">// 最后拼接起来成一个64 bit的二进制数字，转换成10进制就是个long型</span><br><span class="hljs-keyword">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) |<br>(datacenterId &lt;&lt; datacenterIdShift) |<br>(workerId &lt;&lt; workerIdShift) | sequence;<br>&#125;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 当某一毫秒的时间，产生的id数 超过4095，系统会进入等待，直到下一毫秒，系统继续产生ID</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> lastTimestamp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> <span class="hljs-title">tilNextMillis</span><span class="hljs-params">(<span class="hljs-keyword">long</span> lastTimestamp)</span> </span>&#123;<br> <br><span class="hljs-keyword">long</span> timestamp = timeGen();<br> <br><span class="hljs-keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;<br>timestamp = timeGen();<br>&#125;<br><span class="hljs-keyword">return</span> timestamp;<br>&#125;<br><span class="hljs-comment">//获取当前时间戳</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> <span class="hljs-title">timeGen</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> System.currentTimeMillis();<br>&#125;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  main 测试类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>System.out.println(<span class="hljs-number">1</span>&amp;<span class="hljs-number">4596</span>);<br>System.out.println(<span class="hljs-number">2</span>&amp;<span class="hljs-number">4596</span>);<br>System.out.println(<span class="hljs-number">6</span>&amp;<span class="hljs-number">4596</span>);<br>System.out.println(<span class="hljs-number">6</span>&amp;<span class="hljs-number">4596</span>);<br>System.out.println(<span class="hljs-number">6</span>&amp;<span class="hljs-number">4596</span>);<br>System.out.println(<span class="hljs-number">6</span>&amp;<span class="hljs-number">4596</span>);<br><span class="hljs-comment">//IdWorker worker = new IdWorker(1,1,1);</span><br><span class="hljs-comment">//for (int i = 0; i &lt; 22; i++) &#123;</span><br><span class="hljs-comment">//System.out.println(worker.nextId());</span><br><span class="hljs-comment">//&#125;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SnowFlake算法的优点："><a href="#SnowFlake算法的优点：" class="headerlink" title="SnowFlake算法的优点："></a>SnowFlake算法的优点：</h4><p>(1) 高性能高可用：生成时不依赖于数据库，完全在内存中生成。</p><p>(2) 容量大：每秒钟能生成数百万的自增ID。</p><p>(3) ID自增：存入数据库中，索引效率高。</p><h4 id="SnowFlake算法的缺点："><a href="#SnowFlake算法的缺点：" class="headerlink" title="SnowFlake算法的缺点："></a>SnowFlake算法的缺点：</h4><p>​        依赖于系统时间的一致性，如果系统时间被回调，或者改变，可能会造成id冲突或者重复。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2021/10/03/test/"/>
    <url>/2021/10/03/test/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章。</p><img src="/2021/10/03/test/test.png" class="">]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>冒泡排序</title>
    <link href="/2021/10/01/bubblesort/"/>
    <url>/2021/10/01/bubblesort/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Bubblesort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length-<span class="hljs-number">1</span>;i++) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;arr.length-<span class="hljs-number">1</span>-i;j++) &#123;<br>            <span class="hljs-keyword">if</span>(arr[j]&gt;arr[j+<span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">int</span> temp = arr[j];<br>                arr[j] = arr[j+<span class="hljs-number">1</span>];<br>                arr[j+<span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="冒泡排序简介"><a href="#冒泡排序简介" class="headerlink" title="冒泡排序简介"></a>冒泡排序简介</h2><p>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</p><pre><code>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。针对所有的元素重复以上的步骤，除了最后一个，即需要进行length-1次。第一次是对n个数进行n-1次比较，进行到最后第n个的一个是最大的；第二次是对n-1个数进行n-2次比较，进行到最后第n-1个的一个是最大的； 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/10/01/hello-world/"/>
    <url>/2021/10/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
