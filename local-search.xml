<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SnowFlake算法</title>
    <link href="/2021/10/04/SnowFlake%E7%AE%97%E6%B3%95/"/>
    <url>/2021/10/04/SnowFlake%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>​        SnowFlake 算法，是 Twitter 开源的分布式 id 生成算法。其核心思想就是：使用一个 64 bit 的 long 型的数字作为全局唯一 id。在分布式系统中的应用十分广泛，且ID 引入了时间戳，基本上保持自增的，后面的代码中有详细的注解。</p><p>​        这 64 个 bit 中，其中 1 个 bit 是不用的，然后用其中的 41 bit 作为毫秒数，用 10 bit 作为工作机器 id，12 bit 作为序列号。</p><p>​        给大家举个例子吧，比如下面那个 64 bit 的 long 型数字：</p><ul><li><p>第一个部分，是 1 个 bit：0，这个是无意义的。</p></li><li><p>第二个部分是 41 个 bit：表示的是时间戳。</p></li><li><p>第三个部分是 5 个 bit：表示的是机房 id，10001。</p></li><li><p>第四个部分是 5 个 bit：表示的是机器 id，1 1001。</p></li><li><p>第五个部分是 12 个 bit：表示的序号，就是某个机房某台机器上这一毫秒内同时生成的 id 的序号，0000 00000000。</p><img src="/2021/10/04/SnowFlake%E7%AE%97%E6%B3%95/1.png" class=""></li></ul><h4 id="SnowFlake算法的实现代码如下："><a href="#SnowFlake算法的实现代码如下：" class="headerlink" title="SnowFlake算法的实现代码如下："></a>SnowFlake算法的实现代码如下：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs java"> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IdWorker</span> </span>&#123;<br> <br><span class="hljs-comment">//因为二进制里第一个 bit 为如果是 1，那么都是负数，但是我们生成的 id 都是正数，所以第一个 bit 统一都是 0。</span><br> <br><span class="hljs-comment">//机器ID  2进制5位  32位减掉1位 31个</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> workerId;<br><span class="hljs-comment">//机房ID 2进制5位  32位减掉1位 31个</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> datacenterId;<br><span class="hljs-comment">//代表一毫秒内生成的多个id的最新序号  12位 4096 -1 = 4095 个</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> sequence;<br><span class="hljs-comment">//设置一个时间初始值    2^41 - 1   差不多可以用69年</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> twepoch = <span class="hljs-number">1585644268888L</span>;<br><span class="hljs-comment">//5位的机器id</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> workerIdBits = <span class="hljs-number">5L</span>;<br><span class="hljs-comment">//5位的机房id</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> datacenterIdBits = <span class="hljs-number">5L</span>;<br><span class="hljs-comment">//每毫秒内产生的id数 2 的 12次方</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> sequenceBits = <span class="hljs-number">12L</span>;<br><span class="hljs-comment">// 这个是二进制运算，就是5 bit最多只能有31个数字，也就是说机器id最多只能是32以内</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> maxWorkerId = -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; workerIdBits);<br><span class="hljs-comment">// 这个是一个意思，就是5 bit最多只能有31个数字，机房id最多只能是32以内</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> maxDatacenterId = -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; datacenterIdBits);<br> <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> workerIdShift = sequenceBits;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> datacenterIdShift = sequenceBits + workerIdBits;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> sequenceMask = -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; sequenceBits);<br><span class="hljs-comment">//记录产生时间毫秒数，判断是否是同1毫秒</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> lastTimestamp = -<span class="hljs-number">1L</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getWorkerId</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> workerId;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getDatacenterId</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> datacenterId;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getTimestamp</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> System.currentTimeMillis();<br>&#125;<br> <br> <br> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">IdWorker</span><span class="hljs-params">(<span class="hljs-keyword">long</span> workerId, <span class="hljs-keyword">long</span> datacenterId, <span class="hljs-keyword">long</span> sequence)</span> </span>&#123;<br> <br><span class="hljs-comment">// 检查机房id和机器id是否超过31 不能小于0</span><br><span class="hljs-keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<br>String.format(<span class="hljs-string">&quot;worker Id can&#x27;t be greater than %d or less than 0&quot;</span>,maxWorkerId));<br>&#125;<br> <br><span class="hljs-keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="hljs-number">0</span>) &#123;<br> <br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<br>String.format(<span class="hljs-string">&quot;datacenter Id can&#x27;t be greater than %d or less than 0&quot;</span>,maxDatacenterId));<br>&#125;<br><span class="hljs-keyword">this</span>.workerId = workerId;<br><span class="hljs-keyword">this</span>.datacenterId = datacenterId;<br><span class="hljs-keyword">this</span>.sequence = sequence;<br>&#125;<br> <br><span class="hljs-comment">// 这个是核心方法，通过调用nextId()方法，让当前这台机器上的snowflake算法程序生成一个全局唯一的id</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">long</span> <span class="hljs-title">nextId</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 这儿就是获取当前时间戳，单位是毫秒</span><br><span class="hljs-keyword">long</span> timestamp = timeGen();<br><span class="hljs-keyword">if</span> (timestamp &lt; lastTimestamp) &#123;<br> <br>System.err.printf(<br><span class="hljs-string">&quot;clock is moving backwards. Rejecting requests until %d.&quot;</span>, lastTimestamp);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<br>String.format(<span class="hljs-string">&quot;Clock moved backwards. Refusing to generate id for %d milliseconds&quot;</span>,<br>lastTimestamp - timestamp));<br>&#125;<br> <br><span class="hljs-comment">// 下面是说假设在同一个毫秒内，又发送了一个请求生成一个id</span><br><span class="hljs-comment">// 这个时候就得把seqence序号给递增1，最多就是4096</span><br><span class="hljs-keyword">if</span> (lastTimestamp == timestamp) &#123;<br> <br><span class="hljs-comment">// 这个意思是说一个毫秒内最多只能有4096个数字，无论你传递多少进来，</span><br><span class="hljs-comment">//这个位运算保证始终就是在4096这个范围内，避免你自己传递个sequence超过了4096这个范围</span><br>sequence = (sequence + <span class="hljs-number">1</span>) &amp; sequenceMask;<br><span class="hljs-comment">//当某一毫秒的时间，产生的id数 超过4095，系统会进入等待，直到下一毫秒，系统继续产生ID</span><br><span class="hljs-keyword">if</span> (sequence == <span class="hljs-number">0</span>) &#123;<br>timestamp = tilNextMillis(lastTimestamp);<br>&#125;<br> <br>&#125; <span class="hljs-keyword">else</span> &#123;<br>sequence = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 这儿记录一下最近一次生成id的时间戳，单位是毫秒</span><br>lastTimestamp = timestamp;<br><span class="hljs-comment">// 这儿就是最核心的二进制位运算操作，生成一个64bit的id</span><br><span class="hljs-comment">// 先将当前时间戳左移，放到41 bit那儿；将机房id左移放到5 bit那儿；将机器id左移放到5 bit那儿；将序号放最后12 bit</span><br><span class="hljs-comment">// 最后拼接起来成一个64 bit的二进制数字，转换成10进制就是个long型</span><br><span class="hljs-keyword">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) |<br>(datacenterId &lt;&lt; datacenterIdShift) |<br>(workerId &lt;&lt; workerIdShift) | sequence;<br>&#125;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 当某一毫秒的时间，产生的id数 超过4095，系统会进入等待，直到下一毫秒，系统继续产生ID</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> lastTimestamp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> <span class="hljs-title">tilNextMillis</span><span class="hljs-params">(<span class="hljs-keyword">long</span> lastTimestamp)</span> </span>&#123;<br> <br><span class="hljs-keyword">long</span> timestamp = timeGen();<br> <br><span class="hljs-keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;<br>timestamp = timeGen();<br>&#125;<br><span class="hljs-keyword">return</span> timestamp;<br>&#125;<br><span class="hljs-comment">//获取当前时间戳</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> <span class="hljs-title">timeGen</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> System.currentTimeMillis();<br>&#125;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  main 测试类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>System.out.println(<span class="hljs-number">1</span>&amp;<span class="hljs-number">4596</span>);<br>System.out.println(<span class="hljs-number">2</span>&amp;<span class="hljs-number">4596</span>);<br>System.out.println(<span class="hljs-number">6</span>&amp;<span class="hljs-number">4596</span>);<br>System.out.println(<span class="hljs-number">6</span>&amp;<span class="hljs-number">4596</span>);<br>System.out.println(<span class="hljs-number">6</span>&amp;<span class="hljs-number">4596</span>);<br>System.out.println(<span class="hljs-number">6</span>&amp;<span class="hljs-number">4596</span>);<br><span class="hljs-comment">//IdWorker worker = new IdWorker(1,1,1);</span><br><span class="hljs-comment">//for (int i = 0; i &lt; 22; i++) &#123;</span><br><span class="hljs-comment">//System.out.println(worker.nextId());</span><br><span class="hljs-comment">//&#125;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SnowFlake算法的优点："><a href="#SnowFlake算法的优点：" class="headerlink" title="SnowFlake算法的优点："></a>SnowFlake算法的优点：</h4><p>(1) 高性能高可用：生成时不依赖于数据库，完全在内存中生成。</p><p>(2) 容量大：每秒钟能生成数百万的自增ID。</p><p>(3) ID自增：存入数据库中，索引效率高。</p><h4 id="SnowFlake算法的缺点："><a href="#SnowFlake算法的缺点：" class="headerlink" title="SnowFlake算法的缺点："></a>SnowFlake算法的缺点：</h4><p>​        依赖于系统时间的一致性，如果系统时间被回调，或者改变，可能会造成id冲突或者重复。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2021/10/03/test/"/>
    <url>/2021/10/03/test/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章。</p><img src="/2021/10/03/test/test.png" class="">]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>冒泡排序</title>
    <link href="/2021/10/01/bubblesort/"/>
    <url>/2021/10/01/bubblesort/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Bubblesort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length-<span class="hljs-number">1</span>;i++) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;arr.length-<span class="hljs-number">1</span>-i;j++) &#123;<br>            <span class="hljs-keyword">if</span>(arr[j]&gt;arr[j+<span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">int</span> temp = arr[j];<br>                arr[j] = arr[j+<span class="hljs-number">1</span>];<br>                arr[j+<span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="冒泡排序简介"><a href="#冒泡排序简介" class="headerlink" title="冒泡排序简介"></a>冒泡排序简介</h2><p>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</p><pre><code>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。针对所有的元素重复以上的步骤，除了最后一个，即需要进行length-1次。第一次是对n个数进行n-1次比较，进行到最后第n个的一个是最大的；第二次是对n-1个数进行n-2次比较，进行到最后第n-1个的一个是最大的； 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/10/01/hello-world/"/>
    <url>/2021/10/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
